{  "shapes": {    "matchName": "ADBE Root Vectors Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Vector Group",        "name": "Limb",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Group",                "name": "Upper Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Distal Upper",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Hand')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Hand')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Hand')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Hand')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Hand')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Hand')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Hand')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[-15.9906158447266,-127.058563232422],[0,0],[0,0],[0,0],[-0.4144287109375,3.19189453125],[-38.1161499023438,0],[-4.7799072265625,-36.8137664794922],[0,0]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0],[4.7799072265625,-36.8137664794922],[38.1161499023438,0],[0,0],[0,0]],\"vertices\":[[90.7761535644531,-79.4992370605469],[90.7761535644531,-79.4992370605469],[0,-79.4992370605469],[-90.7761535644531,-79.4992370605469],[-74.37109375,-209.749694824219],[0,-274.997375488281],[74.37109375,-209.749694824219],[74.37109375,-209.749694824219]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Hand')('Middle Color');",                                    "value": "[0.99607843137255,0.7843137254902,0.29019607843137,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Proximal Upper",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Hand')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Hand')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Hand')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Hand')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Hand')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Hand')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Hand')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,-4.40643310546875],[55.2279510498047,0],[0,55.2279510498047],[-0.55258178710938,4.255859375],[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,55.2279510498047],[-55.2279510498047,0],[0,-4.40643310546875],[0,0],[0,0],[0,0],[0,0],[0.55258178710938,4.255859375]],\"vertices\":[[99.9990386962891,0],[0,99.9990386962891],[-99.9990386962891,0],[-99.1614532470703,-13.0021514892578],[-90.6541748046875,-80.4992370605469],[0,-80.4992370605469],[90.6541748046875,-80.4992370605469],[99.1614532470703,-13.0021514892578]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Hand')('Start Color');",                                    "value": "[0.17647058823529,0.54901960784314,0.92156862745098,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('p1').transform.position",                        "value": "[300,150]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.anchorPoint[0]",                        "value": "138.591000940008"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Group",                "name": "Lower Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Proximal Lower",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Hand')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Hand')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Hand')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Hand')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Hand')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Hand')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Hand')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,-0.17579650878906],[0,0],[41.4209594726562,0],[0,41.4209594726562],[-0.00120544433594,0.17552185058594],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[0,41.4209594726562],[-41.4209594726562,0],[0,-0.17579650878906],[0,0],[0,0],[0,0],[0.00120544433594,0.17552185058594]],\"vertices\":[[74.9992828369141,0],[74.9992828369141,0],[0,74.9992828369141],[-74.9992828369141,0],[-74.9974670410156,-0.5269775390625],[0,-0.5],[74.9974670410156,-0.5269775390625],[74.9974670410156,-0.5269775390625]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Hand')('Middle Color');",                                    "value": "[0.99607843137255,0.7843137254902,0.29019607843137,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Distal Lower",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Hand')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Hand')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Hand')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Hand')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Hand')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Hand')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Hand')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0.03994750976562,0.376708984375],[0.02398681640625,-3.48617553710938],[0,0],[0,0],[-0.39653015136719,2.9849853515625],[-0.27629089355469,2.1279296875],[-25.4107666015625,0],[-3.18661499023438,-24.5425109863281]],\"outTangents\":[[0,0],[0,0],[0,0],[-0.02398681640625,-3.48617553710938],[0,0],[3.18661499023438,-24.5425109863281],[25.4107666015625,0],[0,0]],\"vertices\":[[74.37109375,-9.75161743164062],[74.9974670410156,0.52781677246094],[0,0.5],[-74.9974670410156,0.52781677246094],[-74.4110412597656,-9.37490844726562],[-49.5807342529297,-206.499160766602],[0,-249.997604370117],[49.5807342529297,-206.499160766602]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Hand')('End Color');",                                    "value": "[0.99607843137255,0.7843137254902,0.29019607843137,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('p2ikfkfreek').transform.position",                        "value": "[432.284665778022,300]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.anchorPoint[1]",                        "value": "221.408999059992"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Group",                "name": "Hand Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Fingers",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Thumb",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "{\"closed\":false,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[26.8097229003906,-24.495361328125],[17.1629943847656,-2.2818603515625]],\"outTangents\":[[-20.5931396484375,18.8154449462891],[0,0]],\"vertices\":[[16.4190063476562,39.4956512451172],[-44.9060974121094,75.7171630859375]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Index",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "{\"closed\":false,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[20.653564453125,4.97735595703125]],\"outTangents\":[[0,0],[0,0]],\"vertices\":[[-24.0777130126953,27.7018280029297],[-87.7120208740234,31.0659637451172]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Middle",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "{\"closed\":false,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[18.6733551025391,6.05746459960938]],\"outTangents\":[[0,0],[0,0]],\"vertices\":[[-26.2741088867188,3.09153747558594],[-91.3158569335938,-16.7862396240234]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Ring",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "{\"closed\":false,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[18.6294097900391,15.6881103515625]],\"outTangents\":[[0,0],[0,0]],\"vertices\":[[-13.7106781005859,-17.8939208984375],[-64.1016082763672,-56.8587646484375]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Pinky",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "{\"closed\":false,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[8.77232360839844,13.1430206298828]],\"outTangents\":[[0,0],[0,0]],\"vertices\":[[6.70199584960938,-30.8654174804688],[-21.8662567138672,-73.0782165527344]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Stroke",                                "name": "Stroke 1",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Stroke Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Hand')('End Color')",                                    "value": "[0.99607843137255,0.7843137254902,0.29019607843137,1]"                                  },                                  {                                    "matchName": "ADBE Vector Stroke Width",                                    "name": "Stroke Width",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "30"                                  },                                  {                                    "matchName": "ADBE Vector Stroke Line Cap",                                    "name": "Line Cap",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Stroke Dashes",                                    "name": "Dashes",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Stroke Taper",                                    "name": "Taper",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Stroke Wave",                                    "name": "Wave",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Rotation",                                "name": "Rotation",                                "type": "PROPERTY",                                "enabled": true,                                "expression": "",                                "value": "90"                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Palm",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Ellipse",                                "name": "C3",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Ellipse Size",                                    "name": "Size",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "",                                    "value": "[110,110]"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill 1",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Hand')('End Color')",                                    "value": "[0.99607843137255,0.7843137254902,0.29019607843137,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Anchor",                        "name": "Anchor Point",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "",                        "value": "[0,30]"                      },                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\rendctrl.content('Admin').content('p3ikfkfreek').transform.position",                        "value": "[300,450]"                      },                      {                        "matchName": "ADBE Vector Scale",                        "name": "Scale",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\rconst scaleFacs = thisLayer.content('Admin').content('Scaling Factors').transform.scale[0];\rconst handScale = scaleFacs * 100;\r[handScale, handScale]",                        "value": "[99.9990409954051,99.9990409954051]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\r(thisLayer.effect('Hand')('Auto-rotate') * 0.01) * (endctrl.content('Admin').content('ikfkfreekanglessides').transform.anchorPoint[1] + thisLayer.effect('Hand')('Hand Angle')\r) + (1 - (thisLayer.effect('Hand')('Auto-rotate') * 0.01)) * (180 - thisLayer.effect('Hand')('Hand Angle'));",                        "value": "221.408999059992"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": true      },      {        "matchName": "ADBE Vector Group",        "name": "Admin",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Group",                "name": "Scaling Factors",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                                          ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Scale",                        "name": "Scale",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\rconst scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\rconst widthScale = endctrl.effect('Limber')('Width Scale')* 0.01;\rscaleFacs = scaleFactor * widthScale;\r[scaleFacs, 0]",                        "value": "[0.99999040995405,0]"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Scale",                "name": "Scale",                "type": "PROPERTY",                "enabled": true,                "expression": "////// LIMBER 2.0 //////\nconst limbLayers = {\nankle: thisComp.layer('{{ end }}'),\nhip: thisComp.layer('{{ start }}'),\nleg: thisComp.layer('{{ limb }}')\n};value;",                "value": "[100,100]"              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": false      }    ]  },  "effects": {    "matchName": "ADBE Effect Parade",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "Pseudo/skl_limb_hand_02",        "name": "Hand",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "Pseudo/skl_limb_hand_02-0001",            "name": "Widths",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0005",            "name": "Hand",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0006",            "name": "Colors",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0010",            "name": "Hand",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0011",            "name": "Splits",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0016",            "name": "Hand",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0017",            "name": "Hand",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_hand_02-0020",            "name": "Hand",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "ADBE Effect Built In Params",            "name": "Compositing Options",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Effect Mask Parade",                "name": "Masks",                "type": "INDEXED_GROUP",                "properties": [                                  ],                "enabled": true              }            ],            "enabled": true          }        ],        "enabled": true      }    ]  },  "transform": {    "matchName": "ADBE Transform Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Anchor Point",        "name": "Anchor Point",        "type": "PROPERTY",        "enabled": true,        "expression": "[0,0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position",        "name": "Position",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = [0,0];\nif (thisLayer.hasParent) {val = thisLayer.parent.fromWorld([0,0,0])};\n[val[0],val[1],0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position_0",        "name": "X Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Position_1",        "name": "Y Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Rotate Z",        "name": "Rotation",        "type": "PROPERTY",        "enabled": true,        "expression": "let curlayer = thisLayer; \nconst rot = 0; \nwhile(curlayer.hasParent){rot += curlayer.parent('ADBE Transform Group')('ADBE Rotate Z'); \ncurlayer = curlayer.parent;} -rot;",        "value": "0"      }    ]  }}